// #include "FIRFilter.h"

// static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.0032906f, -0.0052635f, -0.0068811f, 0.0000000f, 0.0254209f, 0.0724719f, 0.1311260f, 0.1805961f, 0.2000000f, 0.1805961f, 0.1311260f, 0.0724719f, 0.0254209f, 0.0000000f, -0.0068811f, -0.0052635f};

// void FIRFilter_Init(FIRFilter *FIR) {

//   /* Clear filter buffer */
//   for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {
//     FIR->buf[n] = 0.0f;
//   }

//   /* Reset buffer index */
//   FIR->bufIndex = 0;

//   /* Clear filter output */
//   FIR->out = 0.0f;
// }

// float FIRFilter_Update(FIRFilter *FIR, float inp) {

//   /* Store latest sample in buffer */
//   FIR->buf[FIR->bufIndex] = inp;

//   /* Increment buffer index and wrap around if necessary */
//   FIR->bufIndex++;

//   if (FIR->bufIndex == FIR_FILTER_LENGTH) {
//     FIR->bufIndex = 0;
//   }

//   /* Compute new output sampe (via convolution) */
//   FIR->out = 0.0f;

//   uint8_t sumIndex = FIR->bufIndex;

//   for (uint8_t n = 0; n < FIR_FILTER_LENGTH; n++) {

//     /* Decrease index and wrap if necessary */
//     if (sumIndex > 0) {
//       sumIndex--;
//     } else {
//       sumIndex = FIR_FILTER_LENGTH - 1;
//     }

//     /* Multiply impulse response with shifted input sample and add to output */
//     FIR->out += FIR_IMPULSE_RESPONSE[n] * FIR->buf[sumIndex];

//   }

//   /* Return Filtered Output */

//   return FIR->out;
// }